/**
 */
package fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.provider;

import fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.util.PolycreateAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PolycreateItemProviderAdapterFactory extends PolycreateAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PolycreateItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Polycreate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolycreateItemProvider polycreateItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Polycreate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolycreateAdapter() {
		if (polycreateItemProvider == null) {
			polycreateItemProvider = new PolycreateItemProvider(this);
		}

		return polycreateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.GripperSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GripperSensorItemProvider gripperSensorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.GripperSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGripperSensorAdapter() {
		if (gripperSensorItemProvider == null) {
			gripperSensorItemProvider = new GripperSensorItemProvider(this);
		}

		return gripperSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.RightSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RightSensorItemProvider rightSensorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.RightSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRightSensorAdapter() {
		if (rightSensorItemProvider == null) {
			rightSensorItemProvider = new RightSensorItemProvider(this);
		}

		return rightSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.LeftSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeftSensorItemProvider leftSensorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.LeftSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeftSensorAdapter() {
		if (leftSensorItemProvider == null) {
			leftSensorItemProvider = new LeftSensorItemProvider(this);
		}

		return leftSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Object} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectItemProvider objectItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Object}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectAdapter() {
		if (objectItemProvider == null) {
			objectItemProvider = new ObjectItemProvider(this);
		}

		return objectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.GoForward} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoForwardItemProvider goForwardItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.GoForward}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoForwardAdapter() {
		if (goForwardItemProvider == null) {
			goForwardItemProvider = new GoForwardItemProvider(this);
		}

		return goForwardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.GoBackward} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoBackwardItemProvider goBackwardItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.GoBackward}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoBackwardAdapter() {
		if (goBackwardItemProvider == null) {
			goBackwardItemProvider = new GoBackwardItemProvider(this);
		}

		return goBackwardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.OpenGripper} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenGripperItemProvider openGripperItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.OpenGripper}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenGripperAdapter() {
		if (openGripperItemProvider == null) {
			openGripperItemProvider = new OpenGripperItemProvider(this);
		}

		return openGripperItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.CloseGripper} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloseGripperItemProvider closeGripperItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.CloseGripper}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloseGripperAdapter() {
		if (closeGripperItemProvider == null) {
			closeGripperItemProvider = new CloseGripperItemProvider(this);
		}

		return closeGripperItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Turn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TurnItemProvider turnItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Turn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTurnAdapter() {
		if (turnItemProvider == null) {
			turnItemProvider = new TurnItemProvider(this);
		}

		return turnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Stop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StopItemProvider stopItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Stop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStopAdapter() {
		if (stopItemProvider == null) {
			stopItemProvider = new StopItemProvider(this);
		}

		return stopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.StructuralCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructuralConditionItemProvider structuralConditionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.StructuralCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructuralConditionAdapter() {
		if (structuralConditionItemProvider == null) {
			structuralConditionItemProvider = new StructuralConditionItemProvider(this);
		}

		return structuralConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Comparison} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComparisonItemProvider comparisonItemProvider;

	/**
	 * This creates an adapter for a {@link fr.unice.polytech.si5.polycreate.abstractsyntax.polycreate.Comparison}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComparisonAdapter() {
		if (comparisonItemProvider == null) {
			comparisonItemProvider = new ComparisonItemProvider(this);
		}

		return comparisonItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (polycreateItemProvider != null)
			polycreateItemProvider.dispose();
		if (variableItemProvider != null)
			variableItemProvider.dispose();
		if (gripperSensorItemProvider != null)
			gripperSensorItemProvider.dispose();
		if (rightSensorItemProvider != null)
			rightSensorItemProvider.dispose();
		if (leftSensorItemProvider != null)
			leftSensorItemProvider.dispose();
		if (objectItemProvider != null)
			objectItemProvider.dispose();
		if (goForwardItemProvider != null)
			goForwardItemProvider.dispose();
		if (goBackwardItemProvider != null)
			goBackwardItemProvider.dispose();
		if (openGripperItemProvider != null)
			openGripperItemProvider.dispose();
		if (closeGripperItemProvider != null)
			closeGripperItemProvider.dispose();
		if (turnItemProvider != null)
			turnItemProvider.dispose();
		if (stopItemProvider != null)
			stopItemProvider.dispose();
		if (structuralConditionItemProvider != null)
			structuralConditionItemProvider.dispose();
		if (comparisonItemProvider != null)
			comparisonItemProvider.dispose();
	}

}
