// automatically generated by Xtext
grammar fr.unice.polytech.si5.polycreate.concretesyntax.Polycreate with org.eclipse.xtext.common.Terminals

import "http://www.polytech.unice.fr/polycreate"   
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Polycreate returns Polycreate:
	{Polycreate}
	'Polycreate'
	name=EString
	'{'
		('operation' '{' operation+=Operation ( "," operation+=Operation)* '}' )?
		('variable' '{' variable+=Variable ( "," variable+=Variable)* '}' )?
	'}';

Operation returns Operation:
	GoForward | GoBackward | OpenGripper | CloseGripper | Turn | Stop | StructuralCondition;

Variable returns Variable:
	Variable_Impl | GripperSensor | RightSensor | LeftSensor | Object;

Condition returns Condition:
	Comparison;

EString returns ecore::EString:
	STRING | ID;

Variable_Impl returns Variable:
	{Variable}
	'Variable'
	name=EString
	'{'
		('type' type=VarType)?
		('initialValue' initialValue=EDouble)?
	'}';

GoForward returns GoForward:
	{GoForward}
	'GoForward'
	;

GoBackward returns GoBackward:
	{GoBackward}
	'GoBackward'
	;

OpenGripper returns OpenGripper:
	{OpenGripper}
	'OpenGripper'
	;

CloseGripper returns CloseGripper:
	{CloseGripper}
	'CloseGripper'
	;

Turn returns Turn:
	{Turn}
	'Turn'
	;

Stop returns Stop:
	{Stop}
	'Stop'
	;

StructuralCondition returns StructuralCondition:
	'StructuralCondition'
	'{'
		('then' '(' then+=[Operation|EString] ( "," then+=[Operation|EString])* ')' )?
		('else' '(' else+=[Operation|EString] ( "," else+=[Operation|EString])* ')' )?
		'if' '(' if+=[Condition|EString] ( "," if+=[Condition|EString])* ')' 
	'}';

Comparison returns Comparison:
	'Comparison'
	'{'
		('value' value=VarType)?
		'leftVariable' leftVariable=[Variable|EString]
		'rightVariable' rightVariable=[Variable|EString]
	'}';

enum VarType returns VarType:
				int = 'int' | double = 'double' | PositionSensor = 'PositionSensor' | TouchSensor = 'TouchSensor' | DistanceSensor = 'DistanceSensor' | Camera = 'Camera' | Receiver = 'Receiver' | GPS = 'GPS' | Motor = 'Motor';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

GripperSensor returns GripperSensor:
	{GripperSensor}
	'GripperSensor'
	name=EString
	'{'
		('type' type=VarType)?
		('initialValue' initialValue=EDouble)?
	'}';

RightSensor returns RightSensor:
	{RightSensor}
	'RightSensor'
	name=EString
	'{'
		('type' type=VarType)?
		('initialValue' initialValue=EDouble)?
	'}';

LeftSensor returns LeftSensor:
	{LeftSensor}
	'LeftSensor'
	name=EString
	'{'
		('type' type=VarType)?
		('initialValue' initialValue=EDouble)?
	'}';

Object returns Object:
	{Object}
	'Object'
	name=EString
	'{'
		('type' type=VarType)?
		('initialValue' initialValue=EDouble)?
		('position' position=VarType)?
	'}';
